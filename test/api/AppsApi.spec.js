/**
 * Gasper API
 * Handles authentication, creation/management of applications, databases, users and also provides a superuser API. <br><br> Only a superuser can avail the superuser API. A superuser can **grant/revoke** superuser privileges to other users. A default  superuser is created every time a Gasper instance is launched whose credentials are defined in the `admin` section of `config.toml`, the main configuration file. A sample configuration file is available [here](https://github.com/sdslabs/gasper/blob/develop/config.sample.toml#L37).<br><br> **Note:-** Normally the applications and databases can only be managed by their owners but the superuser can bypass that check.<br><br> **PS:-** If you want to programmatically generate a client for this API, you can find the corresponding OpenAPI specifications [here](https://github.com/sdslabs/gasper/tree/develop/docs/content/api/specs). We recommend using [OpenAPI-Generator](https://openapi-generator.tech/) for generating clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@sdslabs.co.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GasperApi);
  }
}(this, function(expect, GasperApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GasperApi.AppsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppsApi', function() {
    describe('createApp', function() {
      it('should call createApp successfully', function(done) {
        //uncomment below and update the code to test createApp
        //instance.createApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppByUser', function() {
      it('should call deleteAppByUser successfully', function(done) {
        //uncomment below and update the code to test deleteAppByUser
        //instance.deleteAppByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchAppByUser', function() {
      it('should call fetchAppByUser successfully', function(done) {
        //uncomment below and update the code to test fetchAppByUser
        //instance.fetchAppByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchAppsByUser', function() {
      it('should call fetchAppsByUser successfully', function(done) {
        //uncomment below and update the code to test fetchAppsByUser
        //instance.fetchAppsByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchLogsByUser', function() {
      it('should call fetchLogsByUser successfully', function(done) {
        //uncomment below and update the code to test fetchLogsByUser
        //instance.fetchLogsByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rebuildAppByUser', function() {
      it('should call rebuildAppByUser successfully', function(done) {
        //uncomment below and update the code to test rebuildAppByUser
        //instance.rebuildAppByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transferAppByUser', function() {
      it('should call transferAppByUser successfully', function(done) {
        //uncomment below and update the code to test transferAppByUser
        //instance.transferAppByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAppByUser', function() {
      it('should call updateAppByUser successfully', function(done) {
        //uncomment below and update the code to test updateAppByUser
        //instance.updateAppByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
