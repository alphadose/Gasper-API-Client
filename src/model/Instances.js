/**
 * Gasper Kaze API
 * Handles authentication, creation/management of applications, databases, users and also provides a superuser API. <br><br> Only a superuser can avail the superuser API. A superuser can **grant/revoke** superuser privileges to other users. A default  superuser is created every time a Gasper instance is launched whose credentials are defined in the `admin` section of `config.toml`, the main configuration file. A sample configuration file is available [here](https://github.com/sdslabs/gasper/blob/develop/config.sample.toml#L37).<br><br> **Note:-** Normally the applications and databases can only be managed by their owners but the superuser can bypass that check.<br><br> **PS:-** If you want to programmatically generate a client for this API, you can find the corresponding OpenAPI specifications [here](https://github.com/sdslabs/gasper/tree/develop/docs/content/api/specs). We recommend using [OpenAPI-Generator](https://openapi-generator.tech/) for generating clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@sdslabs.co.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Instances model module.
 * @module model/Instances
 * @version 1.0
 */
class Instances {
    /**
     * Constructs a new <code>Instances</code>.
     * @alias module:model/Instances
     */
    constructor() { 
        
        Instances.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instances</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instances} obj Optional instance to populate.
     * @return {module:model/Instances} The populated <code>Instances</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instances();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('instance_type')) {
                obj['instance_type'] = ApiClient.convertToType(data['instance_type'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns Document's identifier assigned by MongoDB
     * @return {String}
     */
    getId() {
        return this._id;
    }

    /**
     * Sets Document's identifier assigned by MongoDB
     * @param {String} id Document's identifier assigned by MongoDB
     */
    setId(id) {
        this['_id'] = id;
    }
/**
     * Returns Name of the application or database
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Name of the application or database
     * @param {String} name Name of the application or database
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns The kind of instance this application belongs to
     * @return {String}
     */
    getInstanceType() {
        return this.instance_type;
    }

    /**
     * Sets The kind of instance this application belongs to
     * @param {String} instanceType The kind of instance this application belongs to
     */
    setInstanceType(instanceType) {
        this['instance_type'] = instanceType;
    }
/**
     * Returns The programming language in which the application is written
     * @return {module:model/Instances.LanguageEnum}
     */
    getLanguage() {
        return this.language;
    }

    /**
     * Sets The programming language in which the application is written
     * @param {module:model/Instances.LanguageEnum} language The programming language in which the application is written
     */
    setLanguage(language) {
        this['language'] = language;
    }

}

/**
 * Document's identifier assigned by MongoDB
 * @member {String} _id
 */
Instances.prototype['_id'] = undefined;

/**
 * Name of the application or database
 * @member {String} name
 */
Instances.prototype['name'] = undefined;

/**
 * The kind of instance this application belongs to
 * @member {String} instance_type
 */
Instances.prototype['instance_type'] = undefined;

/**
 * The programming language in which the application is written
 * @member {module:model/Instances.LanguageEnum} language
 */
Instances.prototype['language'] = undefined;





/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
Instances['LanguageEnum'] = {

    /**
     * value: "php"
     * @const
     */
    "php": "php",

    /**
     * value: "nodejs"
     * @const
     */
    "nodejs": "nodejs",

    /**
     * value: "static"
     * @const
     */
    "static": "static",

    /**
     * value: "python2"
     * @const
     */
    "python2": "python2",

    /**
     * value: "python3"
     * @const
     */
    "python3": "python3",

    /**
     * value: "golang"
     * @const
     */
    "golang": "golang",

    /**
     * value: "ruby"
     * @const
     */
    "ruby": "ruby"
};



export default Instances;

