/**
 * Gasper Kaze API
 * Handles authentication, creation/management of applications, databases, users and also provides a superuser API. <br><br> Only a superuser can avail the superuser API. A superuser can **grant/revoke** superuser privileges to other users. A default  superuser is created every time a Gasper instance is launched whose credentials are defined in the `admin` section of `config.toml`, the main configuration file. A sample configuration file is available [here](https://github.com/sdslabs/gasper/blob/develop/config.sample.toml#L37).<br><br> **Note:-** Normally the applications and databases can only be managed by their owners but the superuser can bypass that check.<br><br> **PS:-** If you want to programmatically generate a client for this API, you can find the corresponding OpenAPI specifications [here](https://github.com/sdslabs/gasper/tree/develop/docs/content/api/specs). We recommend using [OpenAPI-Generator](https://openapi-generator.tech/) for generating clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@sdslabs.co.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse20013 model module.
 * @module model/InlineResponse20013
 * @version 1.0
 */
class InlineResponse20013 {
    /**
     * Constructs a new <code>InlineResponse20013</code>.
     * @alias module:model/InlineResponse20013
     */
    constructor() { 
        
        InlineResponse20013.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse20013</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse20013} obj Optional instance to populate.
     * @return {module:model/InlineResponse20013} The populated <code>InlineResponse20013</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse20013();

            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('kaze')) {
                obj['kaze'] = ApiClient.convertToType(data['kaze'], ['String']);
            }
            if (data.hasOwnProperty('enrai')) {
                obj['enrai'] = ApiClient.convertToType(data['enrai'], ['String']);
            }
            if (data.hasOwnProperty('hikari')) {
                obj['hikari'] = ApiClient.convertToType(data['hikari'], ['String']);
            }
            if (data.hasOwnProperty('mizu')) {
                obj['mizu'] = ApiClient.convertToType(data['mizu'], ['String']);
            }
            if (data.hasOwnProperty('mongodb')) {
                obj['mongodb'] = ApiClient.convertToType(data['mongodb'], ['String']);
            }
            if (data.hasOwnProperty('mysql')) {
                obj['mysql'] = ApiClient.convertToType(data['mysql'], ['String']);
            }
            if (data.hasOwnProperty('iwa')) {
                obj['iwa'] = ApiClient.convertToType(data['iwa'], ['String']);
            }
        }
        return obj;
    }

/**
     * @return {Boolean}
     */
    getSuccess() {
        return this.success;
    }

    /**
     * @param {Boolean} success
     */
    setSuccess(success) {
        this['success'] = success;
    }
/**
     * @return {Array.<String>}
     */
    getKaze() {
        return this.kaze;
    }

    /**
     * @param {Array.<String>} kaze
     */
    setKaze(kaze) {
        this['kaze'] = kaze;
    }
/**
     * @return {Array.<String>}
     */
    getEnrai() {
        return this.enrai;
    }

    /**
     * @param {Array.<String>} enrai
     */
    setEnrai(enrai) {
        this['enrai'] = enrai;
    }
/**
     * @return {Array.<String>}
     */
    getHikari() {
        return this.hikari;
    }

    /**
     * @param {Array.<String>} hikari
     */
    setHikari(hikari) {
        this['hikari'] = hikari;
    }
/**
     * @return {Array.<String>}
     */
    getMizu() {
        return this.mizu;
    }

    /**
     * @param {Array.<String>} mizu
     */
    setMizu(mizu) {
        this['mizu'] = mizu;
    }
/**
     * @return {Array.<String>}
     */
    getMongodb() {
        return this.mongodb;
    }

    /**
     * @param {Array.<String>} mongodb
     */
    setMongodb(mongodb) {
        this['mongodb'] = mongodb;
    }
/**
     * @return {Array.<String>}
     */
    getMysql() {
        return this.mysql;
    }

    /**
     * @param {Array.<String>} mysql
     */
    setMysql(mysql) {
        this['mysql'] = mysql;
    }
/**
     * @return {Array.<String>}
     */
    getIwa() {
        return this.iwa;
    }

    /**
     * @param {Array.<String>} iwa
     */
    setIwa(iwa) {
        this['iwa'] = iwa;
    }

}

/**
 * @member {Boolean} success
 */
InlineResponse20013.prototype['success'] = undefined;

/**
 * @member {Array.<String>} kaze
 */
InlineResponse20013.prototype['kaze'] = undefined;

/**
 * @member {Array.<String>} enrai
 */
InlineResponse20013.prototype['enrai'] = undefined;

/**
 * @member {Array.<String>} hikari
 */
InlineResponse20013.prototype['hikari'] = undefined;

/**
 * @member {Array.<String>} mizu
 */
InlineResponse20013.prototype['mizu'] = undefined;

/**
 * @member {Array.<String>} mongodb
 */
InlineResponse20013.prototype['mongodb'] = undefined;

/**
 * @member {Array.<String>} mysql
 */
InlineResponse20013.prototype['mysql'] = undefined;

/**
 * @member {Array.<String>} iwa
 */
InlineResponse20013.prototype['iwa'] = undefined;






export default InlineResponse20013;

