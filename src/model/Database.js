/**
 * Gasper Kaze API
 * Handles authentication, creation/management of applications, databases, users and also provides a superuser API. <br><br> Only a superuser can avail the superuser API. A superuser can **grant/revoke** superuser privileges to other users. A default  superuser is created every time a Gasper instance is launched whose credentials are defined in the `admin` section of `config.toml`, the main configuration file. A sample configuration file is available [here](https://github.com/sdslabs/gasper/blob/develop/config.sample.toml#L37).<br><br> **Note:-** Normally the applications and databases can only be managed by their owners but the superuser can bypass that check.<br><br> **PS:-** If you want to programmatically generate a client for this API, you can find the corresponding OpenAPI specifications [here](https://github.com/sdslabs/gasper/tree/develop/docs/content/api/specs). We recommend using [OpenAPI-Generator](https://openapi-generator.tech/) for generating clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@sdslabs.co.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Database model module.
 * @module model/Database
 * @version 1.0
 */
class Database {
    /**
     * Constructs a new <code>Database</code>.
     * @alias module:model/Database
     * @param name {String} Name of the database
     * @param password {String} Password of the database
     */
    constructor(name, password) { 
        
        Database.initialize(this, name, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, password) { 
        obj['name'] = name;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>Database</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Database} obj Optional instance to populate.
     * @return {module:model/Database} The populated <code>Database</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Database();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns Name of the database
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Name of the database
     * @param {String} name Name of the database
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns Password of the database
     * @return {String}
     */
    getPassword() {
        return this.password;
    }

    /**
     * Sets Password of the database
     * @param {String} password Password of the database
     */
    setPassword(password) {
        this['password'] = password;
    }

}

/**
 * Name of the database
 * @member {String} name
 */
Database.prototype['name'] = undefined;

/**
 * Password of the database
 * @member {String} password
 */
Database.prototype['password'] = undefined;






export default Database;

