/**
 * Gasper API
 * Handles authentication, creation/management of applications, databases, users and also provides a superuser API. <br><br> Only a superuser can avail the superuser API. A superuser can **grant/revoke** superuser privileges to other users. A default  superuser is created every time a Gasper instance is launched whose credentials are defined in the `admin` section of `config.toml`, the main configuration file. A sample configuration file is available [here](https://github.com/sdslabs/gasper/blob/develop/config.sample.toml#L37).<br><br> **Note:-** Normally the applications and databases can only be managed by their owners but the superuser can bypass that check.<br><br> **PS:-** If you want to programmatically generate a client for this API, you can find the corresponding OpenAPI specifications [here](https://github.com/sdslabs/gasper/tree/develop/docs/content/api/specs). We recommend using [OpenAPI-Generator](https://openapi-generator.tech/) for generating clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@sdslabs.co.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Git model module.
 * @module model/Git
 * @version 1.0
 */
class Git {
    /**
     * Constructs a new <code>Git</code>.
     * @alias module:model/Git
     * @param repoUrl {String} Git Repository URL of the application
     */
    constructor(repoUrl) { 
        
        Git.initialize(this, repoUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repoUrl) { 
        obj['repo_url'] = repoUrl;
    }

    /**
     * Constructs a <code>Git</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Git} obj Optional instance to populate.
     * @return {module:model/Git} The populated <code>Git</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Git();

            if (data.hasOwnProperty('repo_url')) {
                obj['repo_url'] = ApiClient.convertToType(data['repo_url'], 'String');
            }
            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns Git Repository URL of the application
     * @return {String}
     */
    getRepoUrl() {
        return this.repo_url;
    }

    /**
     * Sets Git Repository URL of the application
     * @param {String} repoUrl Git Repository URL of the application
     */
    setRepoUrl(repoUrl) {
        this['repo_url'] = repoUrl;
    }
/**
     * Returns Access token for cloning the application's git repository
     * @return {String}
     */
    getAccessToken() {
        return this.access_token;
    }

    /**
     * Sets Access token for cloning the application's git repository
     * @param {String} accessToken Access token for cloning the application's git repository
     */
    setAccessToken(accessToken) {
        this['access_token'] = accessToken;
    }
/**
     * Returns Specific branch to clone
     * @return {String}
     */
    getBranch() {
        return this.branch;
    }

    /**
     * Sets Specific branch to clone
     * @param {String} branch Specific branch to clone
     */
    setBranch(branch) {
        this['branch'] = branch;
    }

}

/**
 * Git Repository URL of the application
 * @member {String} repo_url
 */
Git.prototype['repo_url'] = undefined;

/**
 * Access token for cloning the application's git repository
 * @member {String} access_token
 */
Git.prototype['access_token'] = undefined;

/**
 * Specific branch to clone
 * @member {String} branch
 * @default 'master'
 */
Git.prototype['branch'] = 'master';






export default Git;

