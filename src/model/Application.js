/**
 * Gasper API
 * Handles authentication, creation/management of applications, databases, users and also provides a superuser API. <br><br> Only a superuser can avail the superuser API. A superuser can **grant/revoke** superuser privileges to other users. A default  superuser is created every time a Gasper instance is launched whose credentials are defined in the `admin` section of `config.toml`, the main configuration file. A sample configuration file is available [here](https://github.com/sdslabs/gasper/blob/develop/config.sample.toml#L37).<br><br> **Note:-** Normally the applications and databases can only be managed by their owners but the superuser can bypass that check.<br><br> **PS:-** If you want to programmatically generate a client for this API, you can find the corresponding OpenAPI specifications [here](https://github.com/sdslabs/gasper/tree/develop/docs/content/api/specs). We recommend using [OpenAPI-Generator](https://openapi-generator.tech/) for generating clients.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@sdslabs.co.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Context from './Context';
import Git from './Git';
import InlineResponse2001Resources from './InlineResponse2001Resources';

/**
 * The Application model module.
 * @module model/Application
 * @version 1.0
 */
class Application {
    /**
     * Constructs a new <code>Application</code>.
     * @alias module:model/Application
     * @param name {String} Name of the application
     * @param password {String} Password required for SSH access to the application's docker container
     * @param git {module:model/Git} 
     * @param context {module:model/Context} 
     */
    constructor(name, password, git, context) { 
        
        Application.initialize(this, name, password, git, context);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, password, git, context) { 
        obj['name'] = name;
        obj['password'] = password;
        obj['git'] = git;
        obj['context'] = context;
    }

    /**
     * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Application} obj Optional instance to populate.
     * @return {module:model/Application} The populated <code>Application</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('git')) {
                obj['git'] = Git.constructFromObject(data['git']);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = Context.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('env')) {
                obj['env'] = ApiClient.convertToType(data['env'], {'String': 'String'});
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = InlineResponse2001Resources.constructFromObject(data['resources']);
            }
        }
        return obj;
    }

/**
     * Returns Name of the application
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets Name of the application
     * @param {String} name Name of the application
     */
    setName(name) {
        this['name'] = name;
    }
/**
     * Returns Password required for SSH access to the application's docker container
     * @return {String}
     */
    getPassword() {
        return this.password;
    }

    /**
     * Sets Password required for SSH access to the application's docker container
     * @param {String} password Password required for SSH access to the application's docker container
     */
    setPassword(password) {
        this['password'] = password;
    }
/**
     * @return {module:model/Git}
     */
    getGit() {
        return this.git;
    }

    /**
     * @param {module:model/Git} git
     */
    setGit(git) {
        this['git'] = git;
    }
/**
     * @return {module:model/Context}
     */
    getContext() {
        return this.context;
    }

    /**
     * @param {module:model/Context} context
     */
    setContext(context) {
        this['context'] = context;
    }
/**
     * Returns Environment variables required by the application
     * @return {Object.<String, String>}
     */
    getEnv() {
        return this.env;
    }

    /**
     * Sets Environment variables required by the application
     * @param {Object.<String, String>} env Environment variables required by the application
     */
    setEnv(env) {
        this['env'] = env;
    }
/**
     * @return {module:model/InlineResponse2001Resources}
     */
    getResources() {
        return this.resources;
    }

    /**
     * @param {module:model/InlineResponse2001Resources} resources
     */
    setResources(resources) {
        this['resources'] = resources;
    }

}

/**
 * Name of the application
 * @member {String} name
 */
Application.prototype['name'] = undefined;

/**
 * Password required for SSH access to the application's docker container
 * @member {String} password
 */
Application.prototype['password'] = undefined;

/**
 * @member {module:model/Git} git
 */
Application.prototype['git'] = undefined;

/**
 * @member {module:model/Context} context
 */
Application.prototype['context'] = undefined;

/**
 * Environment variables required by the application
 * @member {Object.<String, String>} env
 */
Application.prototype['env'] = undefined;

/**
 * @member {module:model/InlineResponse2001Resources} resources
 */
Application.prototype['resources'] = undefined;






export default Application;

